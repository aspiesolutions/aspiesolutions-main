on:
  push:
    branches:
    - dev

jobs:
  build:
    runs-on: ubuntu-latest
    environment: development
    env:
      PKG_CONFIG_ALLOW_CROSS: true
      OPENSSL_STATIC: true
      OPENSSL_DIR: /home/runner/musl/openssl
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
      - uses: actions/cache@v3
        id: rust
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install build-essential musl-tools linux-headers-$(uname -r)
      - uses: actions/cache@v3
        id: openssl
        with:
          path: ~/musl/openssl
          key: musl-openssl-1-1-1f
      - name: Build OpenSSL
        if: steps.openssl.outputs.cache-hit != 'true'
        run: |
          sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm
          sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic
          sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux
          sudo mkdir -p /musl/openssl
          wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz
          tar zxvf OpenSSL_1_1_1f.tar.gz
          cd openssl-OpenSSL_1_1_1f
          CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=/home/$(whoami)/musl/openssl --openssldir=/home/$(whoami)/musl/openssl/install linux-x86_64
          make depend
          make -j$(nproc)
          make install_sw install_ssldirs

      - name: Test Rust Workspace
        run: cargo test --workspace --target x86_64-unknown-linux-musl
      - name: Build Api for Development release with debug output
        run: RUST_LOG=debug cargo build --bin rust-graphql-api --target x86_64-unknown-linux-musl
      # - name: Build Api for Release with debug output
      #   run: RUST_LOG=debug cargo build --bin rust-graphql-api --target x86_64-unknown-linux-musl --release
      - name: Build Api Docker Image
        run: docker build -f rust-graphql-api/Dockerfile -t rust-graphql-api:dev rust-graphql-api:${{github.sha}} .
