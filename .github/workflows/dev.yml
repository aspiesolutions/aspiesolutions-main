on:
  push:
    branches:
    - dev

jobs:
  build-api:
    runs-on: ubuntu-latest
    environment: development
    env:
      # PKG_CONFIG_ALLOW_CROSS: true
      # OPENSSL_STATIC: true
      # OPENSSL_DIR: /home/runner/musl/openssl
      TARGET: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      - uses: actions/cache@v3
        id: rust
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-$TARGET-${{ hashFiles('**/Cargo.lock') }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Install Dependencies
        # run: sudo apt-get update && sudo apt-get install build-essential musl-tools linux-headers-$(uname -r) jq ca-certificates
        run: sudo apt-get update && sudo apt-get install build-essential jq

      # - uses: actions/cache@v3
      #   id: openssl
      #   with:
      #     path: ~/musl/openssl
      #     key: musl-openssl-1-1-1f
      # - name: Build OpenSSL
      #   if: steps.openssl.outputs.cache-hit != 'true'
      #   run: |
      #     sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm
      #     sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic
      #     sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux
      #     sudo mkdir -p /musl/openssl
      #     wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz
      #     tar zxvf OpenSSL_1_1_1f.tar.gz
      #     cd openssl-OpenSSL_1_1_1f
      #     CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=/home/$(whoami)/musl/openssl --openssldir=/home/$(whoami)/musl/openssl/install linux-x86_64
      #     make depend
      #     make -j$(nproc)
      #     make install

      - name: Test Rust Workspace
        run: cargo test --workspace
      - name: Build Api for Development release with debug output
        run: RUST_LOG=debug cargo build --bin rust-graphql-api
      - name: Output Schema file
        run: SCHEMA_OUTPUT_PATH=./src/schema/__generated__/schema.graphql
      # - name: Build Api for Release with debug output
      #   run: RUST_LOG=debug cargo build --bin rust-graphql-api --target x86_64-unknown-linux-musl --release
      - name: Build Api Docker Image
        run: docker build -f rust-graphql-api/Dockerfile -t rust-graphql-api:dev .
      - name: Tag Docker image
        run: |
          docker tag rust-graphql-api:dev registry.digitalocean.com/aspiesolutions/rust-graphql-api:dev
          docker tag rust-graphql-api:dev registry.digitalocean.com/aspiesolutions/rust-graphql-api:dev-${{github.sha}}
      - name: Log into registry
        run: doctl registry login --expiry-seconds 600
      - name: Push Docker Image
        run: |
          docker push registry.digitalocean.com/aspiesolutions/rust-graphql-api:dev-${{github.sha}}
          docker push registry.digitalocean.com/aspiesolutions/rust-graphql-api:dev

  build-next-frontend:
    runs-on: ubuntu-latest
    environment: development
    env:
      DOCTL_APP_ID: 64386bea-94ba-482c-81dc-7bfb67ae3547
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/cache@v3
        id: rust
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-frontend-${{ hashFiles('**/Cargo.lock') }}
      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Write schema file for relay
        run: SCHEMA_OUTPUT_DIRECTORY="$PWD/src/schema/__generated__" cargo run --bin output-schema
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.*
          cache: yarn
      - name: Install yarn
        run: sudo npm install -g yarn
      - name: Build Container
        run: docker build -t next-frontend:dev .
      - name: Tag container
        run: |
          docker tag next-frontend:dev registry.digitalocean.com/aspiesolutions/next-frontend:dev-${{github.sha}}
          docker tag next-frontend:dev registry.digitalocean.com/aspiesolutions/next-frontend:dev
      - name: Log into registry
        run: doctl registry login --expiry-seconds 300
      - name: Push Docker Image
        run: docker push --all-tags registry.digitalocean.com/aspiesolutions/next-frontend
  deploy:
    runs-on: ubuntu-latest
    needs: [build-next-frontend,build-api]
    environment: development
    env:
      DATABASE_URL: ${{secrets.database_url}}
    steps:
      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/cache@v3
        id: rust
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-deploy-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Sea Orm Cli
        run: then cargo install sea-orm-cli;
      - name: Run Migrations
        run: ~/.cargo/bin/sea-orm-cli migrate up
      - name: Update App spec
        run: doctl apps get ${{secrets.DOCTL_APP_ID}} --output json | jq '.[0].spec.services[].image.tag = "dev-${{github.sha}}"' | jq '.[0].spec' | doctl apps update ${{secrets.DOCTL_APP_ID}} --spec -

