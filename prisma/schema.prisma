generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model State {
//   id           String    @id @default(auto()) @map("_id") @db.ObjectId
//   abbreviation String    @unique
//   name         String    @unique
//   cities       City[]
//   addresses    Address[]
// }

// model City {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   addresses Address[]
//   state     State     @relation(fields: [state_id], references: [id])
//   state_id  String
// }

model Address {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  text           String @unique
  care  String?
  facility  String?
  facilityType String?
  pinType String?
  pinNum String?
  number String?
  streetPreDir String?
  streetName        String? 
  streetType   String?
  // type          AddressType?
  streetPostDir String?
  unitAbbr      String?
  unitNum       String?
  buisness_name String?
  city          String?
  state         String?      
  zip           String?
  zip4          String?
  country String?
  access_codes  AccessCode[]

}

// enum AddressType {
//   House
//   Duplex
//   Multiplex
//   Apartments
// }

// address is nullable to allow the creation of an access code and
// associate it with an address later
model AccessCode {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  used_for   String
  value      String
  address    Address? @relation(fields: [address_id], references: [id])
  address_id String?
}
// the following types are required to allow next-auth to work correctly
model Account {
  id                 String  @id @default(auto()) @map("_id")  @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(auto()) @map("_id")  @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id")  @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}
model VerificationToken {
  identifier String @id @default(auto()) @map("_id")  @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}