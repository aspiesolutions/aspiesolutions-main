//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::{entity::prelude::*};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "user")]
pub struct Model {
    /// the primary identifier for our system
    #[sea_orm(primary_key, auto_increment = false)]
    id: Uuid,
    /// used to link our IDP with our user
    #[sea_orm(nullable,unique)]
    pub idp_id:Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub email: Option<String>,
    #[sea_orm(column_name = "emailVerified")]
    pub email_verified: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
}

impl std::default::Default for Model {
    fn default() -> Self {
        Self {
            id: Uuid::new_v4(),
            idp_id:None,
            name: None,
            email: None,
            email_verified: None,
            image: None,
        }
    }
}
impl Model {
    pub fn id(&self) -> &Uuid {
        &self.id
    }
    // /// Creates an instance of this model in the database.
    // ///
    // /// if you need to create a new instance of this struct, please call Model::default
    // pub async fn create(&self, conn:&sea_orm::DatabaseConnection) -> Result<Self,crate::Error> {

    //     let user = self::ActiveModel {
    //         id: ActiveValue::Set(self.id),
    //         name: ActiveValue::Set(self.name.clone()),
    //         email: ActiveValue::Set(self.email.clone()),
    //         email_verified:ActiveValue::Set(self.email_verified),
    //         image: ActiveValue::Set(self.image.clone()),
    //     };
    //     Ok(user.insert(conn).await?)
    // }
    // /// deletes an instance of this model in the database
    // pub async fn delete_by_id(&self,conn:&sea_orm::DatabaseConnection) -> Result<DeleteResult,crate::Error> {
    //    Ok(Entity::delete_by_id(self.id).exec(conn).await?)
    // }
    // pub async fn update(&self,conn:&sea_orm::DatabaseConnection) -> Result<Self, crate::Error> {
    //     let active_model = ActiveModel::from(self.clone());
    //     // active model defaults to ActiveModel::unchanged when calling from;
    //     // explicitly set vailues
    //     active_model.id = self.set(c, v)
    //     println!("{active_model:#?}");
    //     Ok(active_model.update(conn).await?)
    // }

}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::account::Entity")]
    Account,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}
impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}
impl ActiveModelBehavior for ActiveModel {}

// #[cfg(test)]
// pub mod test {
//     #[tokio::test]
//     pub async fn test_user_crud() {
//         dotenv::dotenv().unwrap();
//         // create a new instance of this struct by calling default
//         let conn = sea_orm::Database::connect(std::env::var("DATABASE_URL").expect("DATABASE_URL should be defined")).await.expect("Database connection failed");
//         let mut user = super::Model::default();
//         // set whatever fields need to be set on the model
//         user.name = Some("Jordan Morris".to_string());
//         user.email = Some("jthecybertinkerer@gmail.com".to_string());
//         user.email_verified = None;
//         // once you have set the fields you want, you call instance.create(&db)

//         user.create(&conn).await.expect("Create user failed");
//         // in order to update, set values on this struct and then call update
//         // the name field doesnt have any unique constraints so it should pass
//         let new_name =Some("Joe Podunck hicktown".to_string());
//         user.name = new_name.clone();
//         user = user.update(&conn).await.expect("update failed");
//         assert_eq!(user.name,new_name);
//         //


//         user.delete_by_id(&conn).await.expect("delete user failed");
//     }
// }
