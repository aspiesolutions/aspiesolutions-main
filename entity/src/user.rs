//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "user")]
#[sea_orm(schema_name = "public")]
pub struct Model {
    /// the primary identifier for our system
    #[sea_orm(primary_key, auto_increment = false)]
    id: Uuid,
    /// used to link our IDP with our user
    #[sea_orm(unique)]
    pub idp_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub email: Option<String>,
    #[sea_orm(column_name = "emailVerified")]
    pub email_verified: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
    // pub object_id: Uuid,
}

// impl std::default::Default for Model {
//     fn default() -> Self {
//         Self {
//             id: Uuid::new_v4(),
//             idp_id: None,
//             name: None,
//             email: None,
//             email_verified: None,
//             image: None,
//         }
//     }
// }
impl Model {
    pub fn id(&self) -> &Uuid {
        &self.id
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::account::Entity")]
    Account,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
    // #[sea_orm(has_many = "super::object::Entity")]
    // Object,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}
impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}
// impl Related<super::group::Entity> for Entity {
//     fn to() -> RelationDef {
//         super::user_group::Relation::Group.def()
//     }
//     fn via() -> Option<RelationDef> {
//         Some(super::user_group::Relation::User.def().rev())
//     }
// }
// impl Related<super::object::Entity> for Entity {
//     fn to() -> RelationDef {
//         Relation::Object.def()
//     }
// }
impl ActiveModelBehavior for ActiveModel {}
